/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DFS_H
#define DFS_H

#include <thrift/TDispatchProcessor.h>
#include "rpc_types.h"

namespace DFS {

class DFSIf {
 public:
  virtual ~DFSIf() {}
  virtual bool lock(const std::string& path, const std::string& hostname) = 0;
  virtual bool unlock(const std::string& path, const std::string& hostname) = 0;
  virtual void commit(const int64_t id, const std::string& hostname) = 0;
  virtual void Bla() = 0;
  virtual void Ping() = 0;
  virtual void Pong() = 0;
  virtual void dfs_doOperation(const std::string& operation, const std::string& hostname) = 0;
  virtual void dfs_remote_readdir(const std::string& hostname) = 0;
  virtual void dfs_remote_releasedir(const std::string& hostname) = 0;
  virtual void dfs_remote_mkdir(const std::string& hostname) = 0;
  virtual void dfs_remote_symlink(const std::string& hostname) = 0;
  virtual void dfs_remote_unlink(const std::string& hostname) = 0;
  virtual void dfs_remote_rmdir(const std::string& hostname) = 0;
  virtual void dfs_remote_rename(const std::string& hostname) = 0;
  virtual void dfs_remote_link(const std::string& hostname) = 0;
  virtual void dfs_remote_chmod(const std::string& hostname) = 0;
  virtual void dfs_remote_chown(const std::string& hostname) = 0;
  virtual void dfs_remote_truncate(const std::string& hostname) = 0;
  virtual void dfs_remote_ftruncate(const std::string& hostname) = 0;
  virtual void dfs_remote_create(const std::string& hostname) = 0;
  virtual void dfs_remote_open(const std::string& hostname) = 0;
  virtual void dfs_remote_write(const std::string& hostname) = 0;
  virtual void dfs_remote_flush(const std::string& hostname) = 0;
  virtual void dfs_remote_release(const std::string& hostname) = 0;
  virtual void dfs_remote_fsync(const std::string& hostname) = 0;
  virtual void dfs_remote_fallocate(const std::string& hostname) = 0;
};

class DFSIfFactory {
 public:
  typedef DFSIf Handler;

  virtual ~DFSIfFactory() {}

  virtual DFSIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DFSIf* /* handler */) = 0;
};

class DFSIfSingletonFactory : virtual public DFSIfFactory {
 public:
  DFSIfSingletonFactory(const boost::shared_ptr<DFSIf>& iface) : iface_(iface) {}
  virtual ~DFSIfSingletonFactory() {}

  virtual DFSIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DFSIf* /* handler */) {}

 protected:
  boost::shared_ptr<DFSIf> iface_;
};

class DFSNull : virtual public DFSIf {
 public:
  virtual ~DFSNull() {}
  bool lock(const std::string& /* path */, const std::string& /* hostname */) {
    bool _return = false;
    return _return;
  }
  bool unlock(const std::string& /* path */, const std::string& /* hostname */) {
    bool _return = false;
    return _return;
  }
  void commit(const int64_t /* id */, const std::string& /* hostname */) {
    return;
  }
  void Bla() {
    return;
  }
  void Ping() {
    return;
  }
  void Pong() {
    return;
  }
  void dfs_doOperation(const std::string& /* operation */, const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_readdir(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_releasedir(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_mkdir(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_symlink(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_unlink(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_rmdir(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_rename(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_link(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_chmod(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_chown(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_truncate(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_ftruncate(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_create(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_open(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_write(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_flush(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_release(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_fsync(const std::string& /* hostname */) {
    return;
  }
  void dfs_remote_fallocate(const std::string& /* hostname */) {
    return;
  }
};

typedef struct _DFS_lock_args__isset {
  _DFS_lock_args__isset() : path(false), hostname(false) {}
  bool path;
  bool hostname;
} _DFS_lock_args__isset;

class DFS_lock_args {
 public:

  DFS_lock_args() : path(), hostname() {
  }

  virtual ~DFS_lock_args() throw() {}

  std::string path;
  std::string hostname;

  _DFS_lock_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_lock_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_lock_pargs {
 public:


  virtual ~DFS_lock_pargs() throw() {}

  const std::string* path;
  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_lock_result__isset {
  _DFS_lock_result__isset() : success(false) {}
  bool success;
} _DFS_lock_result__isset;

class DFS_lock_result {
 public:

  DFS_lock_result() : success(0) {
  }

  virtual ~DFS_lock_result() throw() {}

  bool success;

  _DFS_lock_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DFS_lock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DFS_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_lock_presult__isset {
  _DFS_lock_presult__isset() : success(false) {}
  bool success;
} _DFS_lock_presult__isset;

class DFS_lock_presult {
 public:


  virtual ~DFS_lock_presult() throw() {}

  bool* success;

  _DFS_lock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DFS_unlock_args__isset {
  _DFS_unlock_args__isset() : path(false), hostname(false) {}
  bool path;
  bool hostname;
} _DFS_unlock_args__isset;

class DFS_unlock_args {
 public:

  DFS_unlock_args() : path(), hostname() {
  }

  virtual ~DFS_unlock_args() throw() {}

  std::string path;
  std::string hostname;

  _DFS_unlock_args__isset __isset;

  void __set_path(const std::string& val) {
    path = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_unlock_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_unlock_pargs {
 public:


  virtual ~DFS_unlock_pargs() throw() {}

  const std::string* path;
  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_unlock_result__isset {
  _DFS_unlock_result__isset() : success(false) {}
  bool success;
} _DFS_unlock_result__isset;

class DFS_unlock_result {
 public:

  DFS_unlock_result() : success(0) {
  }

  virtual ~DFS_unlock_result() throw() {}

  bool success;

  _DFS_unlock_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DFS_unlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DFS_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_unlock_presult__isset {
  _DFS_unlock_presult__isset() : success(false) {}
  bool success;
} _DFS_unlock_presult__isset;

class DFS_unlock_presult {
 public:


  virtual ~DFS_unlock_presult() throw() {}

  bool* success;

  _DFS_unlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DFS_commit_args__isset {
  _DFS_commit_args__isset() : id(false), hostname(false) {}
  bool id;
  bool hostname;
} _DFS_commit_args__isset;

class DFS_commit_args {
 public:

  DFS_commit_args() : id(0), hostname() {
  }

  virtual ~DFS_commit_args() throw() {}

  int64_t id;
  std::string hostname;

  _DFS_commit_args__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_commit_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_commit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_commit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_commit_pargs {
 public:


  virtual ~DFS_commit_pargs() throw() {}

  const int64_t* id;
  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_Bla_args {
 public:

  DFS_Bla_args() {
  }

  virtual ~DFS_Bla_args() throw() {}


  bool operator == (const DFS_Bla_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DFS_Bla_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_Bla_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_Bla_pargs {
 public:


  virtual ~DFS_Bla_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_Ping_args {
 public:

  DFS_Ping_args() {
  }

  virtual ~DFS_Ping_args() throw() {}


  bool operator == (const DFS_Ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DFS_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_Ping_pargs {
 public:


  virtual ~DFS_Ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_Pong_args {
 public:

  DFS_Pong_args() {
  }

  virtual ~DFS_Pong_args() throw() {}


  bool operator == (const DFS_Pong_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DFS_Pong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_Pong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_Pong_pargs {
 public:


  virtual ~DFS_Pong_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_doOperation_args__isset {
  _DFS_dfs_doOperation_args__isset() : operation(false), hostname(false) {}
  bool operation;
  bool hostname;
} _DFS_dfs_doOperation_args__isset;

class DFS_dfs_doOperation_args {
 public:

  DFS_dfs_doOperation_args() : operation(), hostname() {
  }

  virtual ~DFS_dfs_doOperation_args() throw() {}

  std::string operation;
  std::string hostname;

  _DFS_dfs_doOperation_args__isset __isset;

  void __set_operation(const std::string& val) {
    operation = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_doOperation_args & rhs) const
  {
    if (!(operation == rhs.operation))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_doOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_doOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_doOperation_pargs {
 public:


  virtual ~DFS_dfs_doOperation_pargs() throw() {}

  const std::string* operation;
  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_readdir_args__isset {
  _DFS_dfs_remote_readdir_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_readdir_args__isset;

class DFS_dfs_remote_readdir_args {
 public:

  DFS_dfs_remote_readdir_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_readdir_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_readdir_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_readdir_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_readdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_readdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_readdir_pargs {
 public:


  virtual ~DFS_dfs_remote_readdir_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_releasedir_args__isset {
  _DFS_dfs_remote_releasedir_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_releasedir_args__isset;

class DFS_dfs_remote_releasedir_args {
 public:

  DFS_dfs_remote_releasedir_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_releasedir_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_releasedir_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_releasedir_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_releasedir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_releasedir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_releasedir_pargs {
 public:


  virtual ~DFS_dfs_remote_releasedir_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_mkdir_args__isset {
  _DFS_dfs_remote_mkdir_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_mkdir_args__isset;

class DFS_dfs_remote_mkdir_args {
 public:

  DFS_dfs_remote_mkdir_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_mkdir_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_mkdir_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_mkdir_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_mkdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_mkdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_mkdir_pargs {
 public:


  virtual ~DFS_dfs_remote_mkdir_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_symlink_args__isset {
  _DFS_dfs_remote_symlink_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_symlink_args__isset;

class DFS_dfs_remote_symlink_args {
 public:

  DFS_dfs_remote_symlink_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_symlink_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_symlink_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_symlink_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_symlink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_symlink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_symlink_pargs {
 public:


  virtual ~DFS_dfs_remote_symlink_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_unlink_args__isset {
  _DFS_dfs_remote_unlink_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_unlink_args__isset;

class DFS_dfs_remote_unlink_args {
 public:

  DFS_dfs_remote_unlink_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_unlink_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_unlink_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_unlink_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_unlink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_unlink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_unlink_pargs {
 public:


  virtual ~DFS_dfs_remote_unlink_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_rmdir_args__isset {
  _DFS_dfs_remote_rmdir_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_rmdir_args__isset;

class DFS_dfs_remote_rmdir_args {
 public:

  DFS_dfs_remote_rmdir_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_rmdir_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_rmdir_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_rmdir_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_rmdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_rmdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_rmdir_pargs {
 public:


  virtual ~DFS_dfs_remote_rmdir_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_rename_args__isset {
  _DFS_dfs_remote_rename_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_rename_args__isset;

class DFS_dfs_remote_rename_args {
 public:

  DFS_dfs_remote_rename_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_rename_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_rename_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_rename_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_rename_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_rename_pargs {
 public:


  virtual ~DFS_dfs_remote_rename_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_link_args__isset {
  _DFS_dfs_remote_link_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_link_args__isset;

class DFS_dfs_remote_link_args {
 public:

  DFS_dfs_remote_link_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_link_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_link_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_link_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_link_pargs {
 public:


  virtual ~DFS_dfs_remote_link_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_chmod_args__isset {
  _DFS_dfs_remote_chmod_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_chmod_args__isset;

class DFS_dfs_remote_chmod_args {
 public:

  DFS_dfs_remote_chmod_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_chmod_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_chmod_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_chmod_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_chmod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_chmod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_chmod_pargs {
 public:


  virtual ~DFS_dfs_remote_chmod_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_chown_args__isset {
  _DFS_dfs_remote_chown_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_chown_args__isset;

class DFS_dfs_remote_chown_args {
 public:

  DFS_dfs_remote_chown_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_chown_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_chown_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_chown_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_chown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_chown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_chown_pargs {
 public:


  virtual ~DFS_dfs_remote_chown_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_truncate_args__isset {
  _DFS_dfs_remote_truncate_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_truncate_args__isset;

class DFS_dfs_remote_truncate_args {
 public:

  DFS_dfs_remote_truncate_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_truncate_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_truncate_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_truncate_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_truncate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_truncate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_truncate_pargs {
 public:


  virtual ~DFS_dfs_remote_truncate_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_ftruncate_args__isset {
  _DFS_dfs_remote_ftruncate_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_ftruncate_args__isset;

class DFS_dfs_remote_ftruncate_args {
 public:

  DFS_dfs_remote_ftruncate_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_ftruncate_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_ftruncate_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_ftruncate_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_ftruncate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_ftruncate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_ftruncate_pargs {
 public:


  virtual ~DFS_dfs_remote_ftruncate_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_create_args__isset {
  _DFS_dfs_remote_create_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_create_args__isset;

class DFS_dfs_remote_create_args {
 public:

  DFS_dfs_remote_create_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_create_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_create_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_create_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_create_pargs {
 public:


  virtual ~DFS_dfs_remote_create_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_open_args__isset {
  _DFS_dfs_remote_open_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_open_args__isset;

class DFS_dfs_remote_open_args {
 public:

  DFS_dfs_remote_open_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_open_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_open_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_open_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_open_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_open_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_open_pargs {
 public:


  virtual ~DFS_dfs_remote_open_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_write_args__isset {
  _DFS_dfs_remote_write_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_write_args__isset;

class DFS_dfs_remote_write_args {
 public:

  DFS_dfs_remote_write_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_write_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_write_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_write_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_write_pargs {
 public:


  virtual ~DFS_dfs_remote_write_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_flush_args__isset {
  _DFS_dfs_remote_flush_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_flush_args__isset;

class DFS_dfs_remote_flush_args {
 public:

  DFS_dfs_remote_flush_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_flush_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_flush_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_flush_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_flush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_flush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_flush_pargs {
 public:


  virtual ~DFS_dfs_remote_flush_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_release_args__isset {
  _DFS_dfs_remote_release_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_release_args__isset;

class DFS_dfs_remote_release_args {
 public:

  DFS_dfs_remote_release_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_release_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_release_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_release_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_release_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_release_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_release_pargs {
 public:


  virtual ~DFS_dfs_remote_release_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_fsync_args__isset {
  _DFS_dfs_remote_fsync_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_fsync_args__isset;

class DFS_dfs_remote_fsync_args {
 public:

  DFS_dfs_remote_fsync_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_fsync_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_fsync_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_fsync_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_fsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_fsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_fsync_pargs {
 public:


  virtual ~DFS_dfs_remote_fsync_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DFS_dfs_remote_fallocate_args__isset {
  _DFS_dfs_remote_fallocate_args__isset() : hostname(false) {}
  bool hostname;
} _DFS_dfs_remote_fallocate_args__isset;

class DFS_dfs_remote_fallocate_args {
 public:

  DFS_dfs_remote_fallocate_args() : hostname() {
  }

  virtual ~DFS_dfs_remote_fallocate_args() throw() {}

  std::string hostname;

  _DFS_dfs_remote_fallocate_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const DFS_dfs_remote_fallocate_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const DFS_dfs_remote_fallocate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFS_dfs_remote_fallocate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DFS_dfs_remote_fallocate_pargs {
 public:


  virtual ~DFS_dfs_remote_fallocate_pargs() throw() {}

  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class DFSClient : virtual public DFSIf {
 public:
  DFSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DFSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool lock(const std::string& path, const std::string& hostname);
  void send_lock(const std::string& path, const std::string& hostname);
  bool recv_lock();
  bool unlock(const std::string& path, const std::string& hostname);
  void send_unlock(const std::string& path, const std::string& hostname);
  bool recv_unlock();
  void commit(const int64_t id, const std::string& hostname);
  void send_commit(const int64_t id, const std::string& hostname);
  void Bla();
  void send_Bla();
  void Ping();
  void send_Ping();
  void Pong();
  void send_Pong();
  void dfs_doOperation(const std::string& operation, const std::string& hostname);
  void send_dfs_doOperation(const std::string& operation, const std::string& hostname);
  void dfs_remote_readdir(const std::string& hostname);
  void send_dfs_remote_readdir(const std::string& hostname);
  void dfs_remote_releasedir(const std::string& hostname);
  void send_dfs_remote_releasedir(const std::string& hostname);
  void dfs_remote_mkdir(const std::string& hostname);
  void send_dfs_remote_mkdir(const std::string& hostname);
  void dfs_remote_symlink(const std::string& hostname);
  void send_dfs_remote_symlink(const std::string& hostname);
  void dfs_remote_unlink(const std::string& hostname);
  void send_dfs_remote_unlink(const std::string& hostname);
  void dfs_remote_rmdir(const std::string& hostname);
  void send_dfs_remote_rmdir(const std::string& hostname);
  void dfs_remote_rename(const std::string& hostname);
  void send_dfs_remote_rename(const std::string& hostname);
  void dfs_remote_link(const std::string& hostname);
  void send_dfs_remote_link(const std::string& hostname);
  void dfs_remote_chmod(const std::string& hostname);
  void send_dfs_remote_chmod(const std::string& hostname);
  void dfs_remote_chown(const std::string& hostname);
  void send_dfs_remote_chown(const std::string& hostname);
  void dfs_remote_truncate(const std::string& hostname);
  void send_dfs_remote_truncate(const std::string& hostname);
  void dfs_remote_ftruncate(const std::string& hostname);
  void send_dfs_remote_ftruncate(const std::string& hostname);
  void dfs_remote_create(const std::string& hostname);
  void send_dfs_remote_create(const std::string& hostname);
  void dfs_remote_open(const std::string& hostname);
  void send_dfs_remote_open(const std::string& hostname);
  void dfs_remote_write(const std::string& hostname);
  void send_dfs_remote_write(const std::string& hostname);
  void dfs_remote_flush(const std::string& hostname);
  void send_dfs_remote_flush(const std::string& hostname);
  void dfs_remote_release(const std::string& hostname);
  void send_dfs_remote_release(const std::string& hostname);
  void dfs_remote_fsync(const std::string& hostname);
  void send_dfs_remote_fsync(const std::string& hostname);
  void dfs_remote_fallocate(const std::string& hostname);
  void send_dfs_remote_fallocate(const std::string& hostname);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DFSProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DFSIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DFSProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Bla(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Pong(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_doOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_readdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_releasedir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_mkdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_symlink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_unlink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_rmdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_rename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_chmod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_chown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_truncate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_ftruncate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_open(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_flush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_release(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_fsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dfs_remote_fallocate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DFSProcessor(boost::shared_ptr<DFSIf> iface) :
    iface_(iface) {
    processMap_["lock"] = &DFSProcessor::process_lock;
    processMap_["unlock"] = &DFSProcessor::process_unlock;
    processMap_["commit"] = &DFSProcessor::process_commit;
    processMap_["Bla"] = &DFSProcessor::process_Bla;
    processMap_["Ping"] = &DFSProcessor::process_Ping;
    processMap_["Pong"] = &DFSProcessor::process_Pong;
    processMap_["dfs_doOperation"] = &DFSProcessor::process_dfs_doOperation;
    processMap_["dfs_remote_readdir"] = &DFSProcessor::process_dfs_remote_readdir;
    processMap_["dfs_remote_releasedir"] = &DFSProcessor::process_dfs_remote_releasedir;
    processMap_["dfs_remote_mkdir"] = &DFSProcessor::process_dfs_remote_mkdir;
    processMap_["dfs_remote_symlink"] = &DFSProcessor::process_dfs_remote_symlink;
    processMap_["dfs_remote_unlink"] = &DFSProcessor::process_dfs_remote_unlink;
    processMap_["dfs_remote_rmdir"] = &DFSProcessor::process_dfs_remote_rmdir;
    processMap_["dfs_remote_rename"] = &DFSProcessor::process_dfs_remote_rename;
    processMap_["dfs_remote_link"] = &DFSProcessor::process_dfs_remote_link;
    processMap_["dfs_remote_chmod"] = &DFSProcessor::process_dfs_remote_chmod;
    processMap_["dfs_remote_chown"] = &DFSProcessor::process_dfs_remote_chown;
    processMap_["dfs_remote_truncate"] = &DFSProcessor::process_dfs_remote_truncate;
    processMap_["dfs_remote_ftruncate"] = &DFSProcessor::process_dfs_remote_ftruncate;
    processMap_["dfs_remote_create"] = &DFSProcessor::process_dfs_remote_create;
    processMap_["dfs_remote_open"] = &DFSProcessor::process_dfs_remote_open;
    processMap_["dfs_remote_write"] = &DFSProcessor::process_dfs_remote_write;
    processMap_["dfs_remote_flush"] = &DFSProcessor::process_dfs_remote_flush;
    processMap_["dfs_remote_release"] = &DFSProcessor::process_dfs_remote_release;
    processMap_["dfs_remote_fsync"] = &DFSProcessor::process_dfs_remote_fsync;
    processMap_["dfs_remote_fallocate"] = &DFSProcessor::process_dfs_remote_fallocate;
  }

  virtual ~DFSProcessor() {}
};

class DFSProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DFSProcessorFactory(const ::boost::shared_ptr< DFSIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DFSIfFactory > handlerFactory_;
};

class DFSMultiface : virtual public DFSIf {
 public:
  DFSMultiface(std::vector<boost::shared_ptr<DFSIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DFSMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DFSIf> > ifaces_;
  DFSMultiface() {}
  void add(boost::shared_ptr<DFSIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool lock(const std::string& path, const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock(path, hostname);
    }
    return ifaces_[i]->lock(path, hostname);
  }

  bool unlock(const std::string& path, const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock(path, hostname);
    }
    return ifaces_[i]->unlock(path, hostname);
  }

  void commit(const int64_t id, const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commit(id, hostname);
    }
    ifaces_[i]->commit(id, hostname);
  }

  void Bla() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Bla();
    }
    ifaces_[i]->Bla();
  }

  void Ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Ping();
    }
    ifaces_[i]->Ping();
  }

  void Pong() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Pong();
    }
    ifaces_[i]->Pong();
  }

  void dfs_doOperation(const std::string& operation, const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_doOperation(operation, hostname);
    }
    ifaces_[i]->dfs_doOperation(operation, hostname);
  }

  void dfs_remote_readdir(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_readdir(hostname);
    }
    ifaces_[i]->dfs_remote_readdir(hostname);
  }

  void dfs_remote_releasedir(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_releasedir(hostname);
    }
    ifaces_[i]->dfs_remote_releasedir(hostname);
  }

  void dfs_remote_mkdir(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_mkdir(hostname);
    }
    ifaces_[i]->dfs_remote_mkdir(hostname);
  }

  void dfs_remote_symlink(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_symlink(hostname);
    }
    ifaces_[i]->dfs_remote_symlink(hostname);
  }

  void dfs_remote_unlink(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_unlink(hostname);
    }
    ifaces_[i]->dfs_remote_unlink(hostname);
  }

  void dfs_remote_rmdir(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_rmdir(hostname);
    }
    ifaces_[i]->dfs_remote_rmdir(hostname);
  }

  void dfs_remote_rename(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_rename(hostname);
    }
    ifaces_[i]->dfs_remote_rename(hostname);
  }

  void dfs_remote_link(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_link(hostname);
    }
    ifaces_[i]->dfs_remote_link(hostname);
  }

  void dfs_remote_chmod(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_chmod(hostname);
    }
    ifaces_[i]->dfs_remote_chmod(hostname);
  }

  void dfs_remote_chown(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_chown(hostname);
    }
    ifaces_[i]->dfs_remote_chown(hostname);
  }

  void dfs_remote_truncate(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_truncate(hostname);
    }
    ifaces_[i]->dfs_remote_truncate(hostname);
  }

  void dfs_remote_ftruncate(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_ftruncate(hostname);
    }
    ifaces_[i]->dfs_remote_ftruncate(hostname);
  }

  void dfs_remote_create(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_create(hostname);
    }
    ifaces_[i]->dfs_remote_create(hostname);
  }

  void dfs_remote_open(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_open(hostname);
    }
    ifaces_[i]->dfs_remote_open(hostname);
  }

  void dfs_remote_write(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_write(hostname);
    }
    ifaces_[i]->dfs_remote_write(hostname);
  }

  void dfs_remote_flush(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_flush(hostname);
    }
    ifaces_[i]->dfs_remote_flush(hostname);
  }

  void dfs_remote_release(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_release(hostname);
    }
    ifaces_[i]->dfs_remote_release(hostname);
  }

  void dfs_remote_fsync(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_fsync(hostname);
    }
    ifaces_[i]->dfs_remote_fsync(hostname);
  }

  void dfs_remote_fallocate(const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dfs_remote_fallocate(hostname);
    }
    ifaces_[i]->dfs_remote_fallocate(hostname);
  }

};

} // namespace

#endif
