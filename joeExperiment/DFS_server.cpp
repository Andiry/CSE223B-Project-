// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DFS_server.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::DFS;
using namespace std;

DFSHandler::DFSHandler() {
    // Your initialization goes here
}

bool DFSHandler::lock(const std::string& path, const std::string& hostname) {
    // Your implementation goes here
    printf("lock\n");
    return false;
}

bool DFSHandler::unlock(const std::string& path, const std::string& hostname) {
    // Your implementation goes here
    printf("unlock\n");
    return false;
}

void DFSHandler::commit(const int64_t id, const std::string& hostname) {
    // Your implementation goes here
    printf("commit\n");
}

void DFSHandler::Bla() {
    // Your implementation goes here
    printf("Bla\n");
}

void DFSHandler::Ping() {
    // Your implementation goes here
    printf("Ping\n");
}

void DFSHandler::Pong() {
    // Your implementation goes here
    printf("Pong\n");
}

void DFSHandler::dfs_remote_opendir(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_opendir\n");
}

void DFSHandler::dfs_remote_readdir(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_readdir\n");
}

void DFSHandler::dfs_remote_releasedir(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_releasedir\n");
}

void DFSHandler::dfs_remote_mkdir(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_mkdir\n");
}

void DFSHandler::dfs_remote_symlink(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_symlink\n");
}

void DFSHandler::dfs_remote_unlink(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_unlink\n");
}

void DFSHandler::dfs_remote_rmdir(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_rmdir\n");
}

void DFSHandler::dfs_remote_rename(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_rename\n");
}

void DFSHandler::dfs_remote_link(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_link\n");
}

void DFSHandler::dfs_remote_chmod(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_chmod\n");
}

void DFSHandler::dfs_remote_chown(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_chown\n");
}

void DFSHandler::dfs_remote_truncate(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_truncate\n");
}

void DFSHandler::dfs_remote_ftruncate(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_ftruncate\n");
}

void DFSHandler::dfs_remote_create(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_create\n");
}

void DFSHandler::dfs_remote_open(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_open\n");
}

void DFSHandler::dfs_remote_write(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_write\n");
}

void DFSHandler::dfs_remote_flush(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_flush\n");
}

void DFSHandler::dfs_remote_release(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_release\n");
}

void DFSHandler::dfs_remote_fsync(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_fsync\n");
}

void DFSHandler::dfs_remote_fallocate(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_fallocate\n");
}

void DFSHandler::dfs_remote_lock(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_lock\n");
}

void DFSHandler::dfs_remote_flock(const std::string& hostname) {
    // Your implementation goes here
    printf("dfs_remote_flock\n");
}

void * startServer(void * arg) {
    int port = (intptr_t) arg;
    cerr << "Starting Thrift Server..." << endl;

    boost::shared_ptr<DFSHandler> handler(new DFSHandler());
    boost::shared_ptr<TProcessor> processor(new DFSProcessor(handler));
    boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();

    return NULL;
}

